'use client';

import { useState, useEffect, Suspense, lazy } from 'react';
import { ArrowPathIcon } from '@heroicons/react/24/outline';
import { Button } from '@/components/ui/Button';
import TimePeriodSelector from '@/components/dashboard/TimePeriodSelector';
import DashboardSkeleton from '@/components/skeletons/DashboardSkeleton';
import useDashboard from '@/hooks/useDashboard';
import { useAnalytics } from '@/hooks/useAnalytics';
import { useToast } from '@/components/ui/Toast';

// Lazy-loaded components for better performance
const StatsCards = lazy(() => import('@/components/dashboard/StatsCards'));
const CreditConsumptionChart = lazy(() => import('@/components/dashboard/CreditConsumptionChart'));
const QueryDistributionChart = lazy(() => import('@/components/dashboard/QueryDistributionChart'));
const TopDocuments = lazy(() => import('@/components/dashboard/TopDocuments'));
const ActivityTimeline = lazy(() => import('@/components/dashboard/ActivityTimeline'));

/**
 * Main Dashboard Page
 * Displays overview of system usage with analytics and recent activity
 * Responsive design with mobile-first approach
 */
export default function DashboardPage() {
  const dashboard = useDashboard();
  const analytics = useAnalytics();
  const toast = useToast();
  const [isClient, setIsClient] = useState(false);
  
  // Track page view
  useEffect(() => {
    analytics.trackPageView('/dashboard');
    setIsClient(true);
  }, [analytics]);
  
  // Handle dashboard refresh
  const handleRefresh = async () => {
    try {
      await dashboard.refresh();
      toast.success('Dashboard refreshed');
    } catch (error) {
      toast.error('Failed to refresh dashboard');
    }
  };
  
  // If not client-side yet, show skeleton
  if (!isClient) {
    return <DashboardSkeleton />;
  }

  return (
    <div className="pb-safe">
      {/* Header with title and time period selector */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-4 sm:mb-0">
          Dashboard
        </h1>
        <div className="flex w-full sm:w-auto space-x-2 items-center">
          <TimePeriodSelector />
          <Button
            variant="outline"
            size="icon"
            onClick={handleRefresh}
            disabled={dashboard.isRefreshing || !dashboard.isOnline}
            aria-label="Refresh dashboard"
            className="touch-target-min"
          >
            <ArrowPathIcon 
              className={`h-5 w-5 ${dashboard.isRefreshing ? 'animate-spin' : ''}`} 
              aria-hidden="true" 
            />
          </Button>
        </div>
      </div>

      {/* Main dashboard content */}
      <Suspense fallback={<DashboardSkeleton />}>
        {/* Stats cards section */}
        <StatsCards />
        
        {/* Charts section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          <CreditConsumptionChart />
          <QueryDistributionChart />
        </div>
        
        {/* Documents and activity section */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          <div className="lg:col-span-2">
            <TopDocuments />
          </div>
          <div>
            <ActivityTimeline />
          </div>
        </div>
        
        {/* Offline indicator */}
        {!dashboard.isOnline && (
          <div className="fixed bottom-16 left-0 right-0 mx-auto w-full max-w-md p-4 bg-amber-100 dark:bg-amber-900 border border-amber-200 dark:border-amber-800 text-amber-800 dark:text-amber-200 rounded-lg shadow-lg text-center">
            <p className="text-sm font-medium">
              You're offline. Dashboard data may not be up-to-date.
            </p>
          </div>
        )}
      </Suspense>
    </div>
  );
}
